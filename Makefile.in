# Mike's Makefile
# vim: set tabstop=4 expandtab autoindent smartindent:
# author: Sylvain Rabot <sylvain@abstraction.fr>
# date: 03/07/2010
# copyright: All rights reserved

#          __  _________ ______
#         /  |/  /  _/ //_/ __/
#        / /|_/ // // ,< / _/  
#       /_/  /_/___/_/|_/___/  
#

# -- default target ------------------------------------------------------------

dry-run::

# -- variables -----------------------------------------------------------------

prefix                  = @prefix@

APGDIFF                 = @APGDIFF@
AWK                     = @AWK@
BASENAME                = @BASENAME@
BASH                    = @BASH@
CAT                     = @CAT@
CREATEDB                = @CREATEDB@
CUT                     = @CUT@
DATE                    = @DATE@
DIRNAME                 = @DIRNAME@
DROPDB                  = @DROPDB@
ECHO                    = @ECHO@
GCC                     = @GCC@
GETOPT                  = @GETOPT@
GIT                     = @GIT@
GITSTATS                = @GITSTATS@
GOURCE                  = @GOURCE@
GREP                    = @GREP@
MAKE                    = @MAKE@
PG_CONFIG               = @PG_CONFIG@
PG_DUMP                 = @PG_DUMP@
PSQL                    = @PSQL@
REALPATH                = @REALPATH@
RM                      = @RM@
SED                     = @SED@
SHELL                   = @SHELL@
SLEEP                   = @SLEEP@
TEE                     = @TEE@
TEST                    = @TEST@
WHICH                   = @WHICH@

SLEEP_TIME              = @SLEEP_TIME@
SLEEP_TIME             ?= 0.1
PSQL_EXTRA              = --no-psqlrc -v ON_ERROR_STOP=on
RM_EXTRA                = -rf

DATABASE_HOST           = @DATABASE_HOST@
DATABASE_NAME           = @DATABASE_NAME@
DATABASE_PORT           = @DATABASE_PORT@
DATABASE_USER           = @DATABASE_USER@
ENABLE_CREATE_DATABASE  = @ENABLE_CREATE_DATABASE@
ENABLE_CREATE_SCHEMA    = @ENABLE_CREATE_SCHEMA@
PG_CONTRIB_LTREE        = @PG_CONTRIB_LTREE@
PG_CONTRIB_PGCRYPTO     = @PG_CONTRIB_PGCRYPTO@
PG_SHAREDIR             = @PG_SHAREDIR@

# -- cpp defines ---------------------------------------------------------------

TREE_MAX_DEPTH      = @TREE_MAX_DEPTH@
INODE_RAND_COLUMN   = @INODE_RAND_COLUMN@
NO_ATIME            = @NO_ATIME@
NO_VOLUME_LOCK      = @NO_VOLUME_LOCK@

ifneq ($(TREE_MAX_DEPTH),no)
    ifneq ($(TREE_MAX_DEPTH),yes)
        DEFINES += -D TREE_MAX_DEPTH=$(TREE_MAX_DEPTH)
    else
        DEFINES += -D TREE_MAX_DEPTH=24
    endif
endif

ifeq ($(INODE_RAND_COLUMN),yes)
    DEFINES += -D INODE_RAND_COLUMN
endif

ifeq ($(NO_ATIME),yes)
    DEFINES += -D NO_ATIME
endif

ifeq ($(NO_VOLUME_LOCK),yes)
    DEFINES += -D NO_VOLUME_LOCK
endif

# -- database schema -----------------------------------------------------------

# include database files list
include types/types.mak
include functions/functions.mak
include triggers/triggers.mak
include indexes/indexes.mak
include data/data.mak

TARGET_FILE              = mike.o
DATABASE_FILES           = mike.sql
DATABASE_FILES          += $(patsubst %, types/%,       $(DATABASE_TYPES))
DATABASE_FILES          += $(patsubst %, functions/%,   $(DATABASE_FUNCTIONS))
DATABASE_FILES          += $(patsubst %, triggers/%,    $(DATABASE_TRIGGERS))
DATABASE_FILES          += $(patsubst %, indexes/%,     $(DATABASE_INDEXES))
DATABASE_FILES          += $(patsubst %, data/%,        $(DATABASE_DATA))

# -- custom files --------------------------------------------------------------

MIKE_VERSION_FILE       = MIKE_VERSION_FILE
MIKE_TAG_DIFF_FILE      = MIKE_TAG_DIFF_FILE
MIKE_HEAD_DIFF_FILE     = MIKE_HEAD_DIFF_FILE
DRY_RUN_LOG             = dry-run.log
INSTALL_LOG             = install.log

# -- tests ---------------------------------------------------------------------

ifneq ($(DATABASE_HOST),)
	PSQL_HOST = -h $(DATABASE_HOST)
else
	DATABASE_HOST = localhost
endif

ifneq ($(DATABASE_PORT),)
	PSQL_PORT = -p $(DATABASE_PORT)
endif

ifneq ($(GIT),)
	GIT_DIR=$(realpath $(shell $(GIT) rev-parse --git-dir 2>/dev/null))
	ifneq ($(GIT_DIR),)
		IS_BARE_REPOSITORY=`$(GIT) rev-parse --is-bare-repository 2>/dev/null`
		IS_INSIDE_WORK_TREE=`$(GIT) rev-parse --is-inside-work-tree 2>/dev/null`
	endif
endif

# -- psql ----------------------------------------------------------------------

PSQL_FULL_CMD = PGOPTIONS='--client-min-messages=warning' $(PSQL) -U $(DATABASE_USER) -d $(DATABASE_NAME) $(PSQL_EXTRA) $(PSQL_HOST) $(PSQL_PORT)

# -- version -------------------------------------------------------------------

$(MIKE_VERSION_FILE):
ifneq ($(GIT_DIR),)
	@$(RM) $(RM_EXTRA) $(MIKE_VERSION_FILE)
	@$(SHELL) ./MIKE_VERSION_GEN $(MIKE_VERSION_FILE) $(MIKE_HEAD_DIFF_FILE) $(MIKE_TAG_DIFF_FILE)
endif

-include $(MIKE_VERSION_FILE)

# -- mike.o --------------------------------------------------------------------

clean-target:
	@$(ECHO) '    ' REMOVING $(TARGET_FILE); $(RM) $(RM_EXTRA) $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)

info:
	@$(ECHO) '    ' LINK MIKE_VERSION $(MIKE_VERSION);
	@$(ECHO) "INSERT INTO mike.info (key, value) VALUES ('MIKE_VERSION', '$(MIKE_VERSION)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_COMMIT $(MIKE_COMMIT);
	@$(ECHO) "INSERT INTO mike.info (key, value) VALUES ('MIKE_COMMIT', '$(MIKE_COMMIT)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_BRANCH $(MIKE_BRANCH);
	@$(ECHO) "INSERT INTO mike.info (key, value) VALUES ('MIKE_BRANCH', '$(MIKE_BRANCH)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_WHO_INSTALLED $(MIKE_WHO_INSTALLED);
	@$(ECHO) "INSERT INTO mike.info (key, value) VALUES ('MIKE_WHO_INSTALLED', '$(MIKE_WHO_INSTALLED)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK INSTALL_DATE `$(DATE)`;
	@$(ECHO) "INSERT INTO mike.info (key, value) VALUES ('MIKE_INSTALL_DATE', now()::text);" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_CPP_DEFINES "'$(DEFINES)'";
	@$(ECHO) "INSERT INTO mike.info (key, value) VALUES ('MIKE_CC_DEFINES', '$(DEFINES)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_DEFAULT_USERS;
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('mike', 'mike');"                   >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('sylvain', 'srab');"                >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('paul', 'cheval');"                 >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('alexandre', 'qLex');"              >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('robert', 'robish');"               >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('vincent', 'maugette');"            >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('gauthier', 'goth');"               >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('rémi', 'buisre');"                 >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('marie', 'marie');"                 >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('christophe', 'ché');"              >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('jean-christophe', 'jean-claude');" >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('emmanuel', 'manu');"               >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('yannick', 'jefferson');"           >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('yan', 'jurax');"                   >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('arnaud', 'arn');"                  >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('mathilde', 'mathilde');"           >> $(TARGET_FILE);
	@$(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('khaled', 'Mr. K');"                >> $(TARGET_FILE);
	@$(SLEEP) $(SLEEP_TIME)
	
	@# MIKE_TAG_DIFF_FILE
	@$(ECHO) -n; \
	if test -f $(MIKE_TAG_DIFF_FILE); then \
	    $(ECHO) '    ' LINK MIKE_TAG_DIFF_FILE; \
	    ($(ECHO) -n "INSERT INTO mike.info (key, value) VALUES ('MIKE_TAG_DIFF', E'"; \
	    cat $(MIKE_TAG_DIFF_FILE) | $(SED) "s/\(['\\]\)/\1\1/g"; \
	    $(ECHO) -n "');";) >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME); \
	fi
	
	@# MIKE_HEAD_DIFF_FILE
	@$(ECHO) -n; \
	if test -f $(MIKE_HEAD_DIFF_FILE); then \
	    $(ECHO) '    ' LINK MIKE_HEAD_DIFF_FILE; \
	    ($(ECHO) -n "INSERT INTO mike.info (key, value) VALUES ('MIKE_HEAD_DIFF', E'"; \
	    cat $(MIKE_HEAD_DIFF_FILE) | $(SED) "s/\(['\\]\)/\1\1/g"; \
	    $(ECHO) -n "');";) >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME); \
	fi

$(DATABASE_FILES) :
	@$(ECHO) '    ' LINK $@; $(GCC) -x c -E "$@" $(DEFINES) 2> /dev/null | $(GREP) -v -E "^# [0-9]+ .*" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)

# -- dry-run -------------------------------------------------------------------

dry-run::
	@$(MAKE) --no-print-directory dry-run-sub $(MAKEFLAGS)

dry-run-sub: clean-target $(DATABASE_FILES) info
# create database
ifeq ($(ENABLE_CREATE_DATABASE),Yes)
	@$(ECHO) '    ' CREATING DATABASE $(DATABASE_NAME) ON $(DATABASE_USER)@$(DATABASE_HOST);
	@$(CREATEDB) $(PSQL_HOST) $(PSQL_PORT) -U $(DATABASE_USER) $(DATABASE_NAME) --encoding UTF8
	@$(ECHO) '    ' ALTERING DATABASE;
	@$(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET search_path TO public,mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET client_min_messages TO 'log';" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING LANGUAGE plpgsql;
	@$(ECHO) "CREATE LANGUAGE plpgsql;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING LANGUAGE plperl;
	@$(ECHO) "CREATE LANGUAGE plperl;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' IMPORTING CONTRIB ltree;
	@$(PSQL_FULL_CMD) --single-transaction --file $(PG_CONTRIB_LTREE) --quiet
	@$(ECHO) '    ' IMPORTING CONTRIB pgcrypto;
	@$(PSQL_FULL_CMD) --single-transaction --file $(PG_CONTRIB_PGCRYPTO) --quiet
endif
# create schema
ifeq ($(ENABLE_CREATE_SCHEMA),Yes)
	@$(ECHO) '    ' DROPING SCHEMA mike IF EXISTS;
	@$(ECHO) "DROP SCHEMA IF EXISTS mike CASCADE;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING SCHEMA mike;
	@$(ECHO) "CREATE SCHEMA mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' ALTERING search_path;
	@$(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET search_path TO mike,public;" | $(PSQL_FULL_CMD) --quiet
endif
	@$(ECHO) '    ' IMPORTING $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(PSQL_FULL_CMD) --single-transaction --file $(TARGET_FILE) --log-file $(DRY_RUN_LOG) > /dev/null
	@$(ECHO) 
	@$(ECHO) "THIS WAS A DRY RUN !!!!"

# -- install -------------------------------------------------------------------

install:
	@$(MAKE) --no-print-directory install-sub $(MAKEFLAGS)

install-sub: clean-target $(DATABASE_FILES) info
# create database
ifeq ($(ENABLE_CREATE_DATABASE),Yes)
	@$(ECHO) '    ' CREATING DATABASE $(DATABASE_NAME) ON $(DATABASE_USER)@$(DATABASE_HOST);
	@$(CREATEDB) $(PSQL_HOST) $(PSQL_PORT) -U $(DATABASE_USER) $(DATABASE_NAME) --encoding UTF8
	@$(ECHO) '    ' ALTERING DATABASE;
	@$(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET search_path TO public,mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET client_min_messages TO 'log';" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING LANGUAGE plpgsql;
	@$(ECHO) "CREATE LANGUAGE plpgsql;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING LANGUAGE plperl;
	@$(ECHO) "CREATE LANGUAGE plperl;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' IMPORTING CONTRIB ltree;
	@$(PSQL_FULL_CMD) --single-transaction --file $(PG_CONTRIB_LTREE) --quiet
	@$(ECHO) '    ' IMPORTING CONTRIB pgcrypto;
	@$(PSQL_FULL_CMD) --single-transaction --file $(PG_CONTRIB_PGCRYPTO) --quiet
endif
# create schema
ifeq ($(ENABLE_CREATE_SCHEMA),Yes)
	@$(ECHO) '    ' DROPING SCHEMA mike IF EXISTS;
	@$(ECHO) "DROP SCHEMA IF EXISTS mike CASCADE;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING SCHEMA mike;
	@$(ECHO) "CREATE SCHEMA mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' ALTERING search_path;
	@$(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET search_path TO mike,public;" | $(PSQL_FULL_CMD) --quiet
endif
	@$(ECHO) '    ' IMPORTING $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(PSQL_FULL_CMD) --single-transaction --file $(TARGET_FILE) --log-file $(INSTALL_LOG) > /dev/null

# -- drop ----------------------------------------------------------------------

drop-database:
	@$(ECHO) '    ' DROPPING $(DATABASE_NAME) DATABASE;
	@$(ECHO) "DROP DATABASE $(DATABASE_NAME);" | $(PSQL) -U $(DATABASE_USER) $(PSQL_EXTRA) $(PSQL_HOST) $(PSQL_PORT) -d postgres --quiet

drop-schema:
	@$(ECHO) '    ' DROPPING mike SCHEMA;
	@$(ECHO) "DROP SCHEMA IF EXITS mike;" | $(PSQL_FULL_CMD)

drop-functions:
	@$(ECHO) '    ' DROPPING mike FUNCTIONS;
	@$(ECHO) "SELECT mike.__perform('DROP FUNCTION ' || p.proname || '(' || " \
	         "pg_catalog.pg_get_function_identity_arguments(p.oid) || ')') " \
	         "FROM pg_catalog.pg_proc p " \
	         "LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace " \
	         "WHERE n.nspname = 'mike' AND p.proname != '__perform'" \
	         | $(PSQL_FULL_CMD) > /dev/null
	@$(ECHO) "DROP FUNCTION mike.__perform(text);" | $(PSQL_FULL_CMD) > /dev/null

# -- clean ---------------------------------------------------------------------

clean:
ifneq ($(GIT),)
	@$(GIT) clean -fdx
else
	@$(MAKE) --no-print-directory clean-no-git $(MAKEFLAGS)
endif

clean-no-git: clean-doc
	@$(ECHO) Removing $(TARGET_FILE); $(RM) $(RM_EXTRA) $(TARGET_FILE);
	@$(ECHO) Removing $(MIKE_VERSION_FILE); $(RM) $(RM_EXTRA) $(MIKE_VERSION_FILE);
	@$(ECHO) Removing $(MIKE_TAG_DIFF_FILE); $(RM) $(RM_EXTRA) $(MIKE_TAG_DIFF_FILE);
	@$(ECHO) Removing $(MIKE_HEAD_DIFF_FILE); $(RM) $(RM_EXTRA) $(MIKE_HEAD_DIFF_FILE);
	@$(ECHO) Removing Makefile; $(RM) $(RM_EXTRA) Makefile;
	@$(ECHO) Removing configure; $(RM) $(RM_EXTRA) configure;
	@$(ECHO) Removing config.log; $(RM) $(RM_EXTRA) config.log;
	@$(ECHO) Removing config.status; $(RM) $(RM_EXTRA) config.status;
	@$(ECHO) Removing autom4te.cache; $(RM) $(RM_EXTRA) autom4te.cache;
	@$(ECHO) Removing dry-run.log; $(RM) $(RM_EXTRA) dry-run.log;
	@$(ECHO) Removing install.log; $(RM) $(RM_EXTRA) install.log;

# -- development ---------------------------------------------------------------

dev-functions: $(DATABASE_FUNCTIONS)

$(DATABASE_FUNCTIONS):
	@$(ECHO) '    ' CPP $@;
	$(GCC) -x c -E "functions/$@" $(DEFINES) 2> /dev/null | $(GREP) -v -E "^# [0-9]+ .*" | $(PSQL_FULL_CMD) > /dev/null

dev-triggers: $(DATABASE_TRIGGERS)

$(DATABASE_TRIGGERS):
	@$(ECHO) '    ' CPP $@;
	@$(GCC) -x c -E "triggers/$@" $(DEFINES) 2> /dev/null | $(GREP) -v -E "^# [0-9]+ .*" | $(PSQL_FULL_CMD) > /dev/null

# -- git -----------------------------------------------------------------------

graph: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	@exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	@exit 1
endif
	@$(GIT) log --graph --all --format="format:%C(yellow)%h %Creset%an: %s"

stats: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	@exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	@exit 1
endif
	@$(ECHO) Number of commits by author :
	@$(GIT) shortlog --summary --no-merges --numbered --email

gitstats: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	@exit 1
else ifeq ($(GITSTATS),)
	@$(ECHO) >&2 "gitstats not installed ...";
	@exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	@exit 1
endif
	@$(GITSTATS) `$(REALPATH) .` stats

gource: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	@exit 1
else ifeq ($(GOURCE),)
	@$(ECHO) >&2 "gource not installed ...";
	@exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	@exit 1
endif
	@$(GOURCE) --title "Mike's `$(GIT) branch --no-color | $(GREP) "^*" --color=never | $(CUT) -b 3-` branch" \
	    --key --highlight-users --highlight-dirs --loop &

# -- documentation -------------------------------------------------------------

doc:
	@$(MAKE) --no-print-directory -C documentation all

man:
	@$(MAKE) --no-print-directory -C documentation man

html:
	@$(MAKE) --no-print-directory -C documentation html

install-doc:
	@$(MAKE) --no-print-directory -C documentation install

install-html:
	@$(MAKE) --no-print-directory -C documentation install-html

install-man:
	@$(MAKE) --no-print-directory -C documentation install-man

clean-doc:
	@$(MAKE) --no-print-directory -C documentation clean
	@$(RM) $(RM_EXTRA) documention/Makefile

# -- test ----------------------------------------------------------------------

test:
	@$(MAKE) --no-print-directory -C test all

# -- special targets -----------------------------------------------------------

.NOTPARALLEL: $(DATABASE_FILES) drop-database
.PHONY: $(MIKE_VERSION_FILE) $(DATABASE_FILES) test .FORCE
