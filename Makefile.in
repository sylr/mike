# Mike's Makefile
# author: Sylvain Rabot <sylvain@abstraction.fr>
# date: 03/07/2010
# copyright: All rights reserved

#          __  _________ ______
#         /  |/  /  _/ //_/ __/
#        / /|_/ // // ,< / _/  
#       /_/  /_/___/_/|_/___/  
#

# -- default target ------------------------------------------------------------

dry-run::

# -- variables -----------------------------------------------------------------

prefix                  = @prefix@
ECHO                    = @ECHO@
CAT                     = @CAT@
RM                      = @RM@ -rf
REALPATH                = @REALPATH@
GIT                     = @GIT@
GITSTATS                = @GITSTATS@
GOURCE                  = @GOURCE@
SLEEP                   = @SLEEP@
SLEEP_TIME              ?= 0.1
DATE                    = @DATE@
PSQL                    = @PSQL@
PSQL_EXTRA              += --no-psqlrc -v ON_ERROR_STOP=on
CREATEDB                = @CREATEDB@
APGDIFF                 = @APGDIFF@
PG_CONFIG               = @PG_CONFIG@
PG_DUMP                 = @PG_DUMP@
SED                     = @SED@
TEE                     = @TEE@
PG_SHAREDIR             = @PG_SHAREDIR@
PG_CONTRIB_LTREE        = @PG_CONTRIB_LTREE@
DATABASE_USER           = @DATABASE_USER@
DATABASE_NAME           = @DATABASE_NAME@
DATABASE_HOST           = @DATABASE_HOST@
DATABASE_PORT           = @DATABASE_PORT@
ENABLE_CREATE_DATABASE  = @ENABLE_CREATE_DATABASE@
ENABLE_CREATE_SCHEMA    = @ENABLE_CREATE_SCHEMA@
DATABASE_TRIGGERS       = $(wildcard triggers/*.pl)
DATABASE_TRIGGERS       += $(wildcard triggers/*.sql)
DATABASE_FUNCTIONS      = $(wildcard functions/*.pl)
DATABASE_FUNCTIONS      += $(wildcard functions/*.sql)
DATABASE_FILES          = mike.sql
DATABASE_FILES          += $(DATABASE_TRIGGERS) $(DATABASE_FUNCTIONS)
DATABASE_DUMPS          = $(patsubst %.sql, %.dump, $(filter %.sql, $(DATABASE_FILES)))
DATABASE_DUMPS          += $(patsubst %.pl, %.dump, $(filter %.pl,  $(DATABASE_FILES)))
TARGET_FILE             = mike.o
MIKE_VERSION_FILE       = MIKE_VERSION_FILE
MIKE_TAG_DIFF_FILE      = MIKE_TAG_DIFF_FILE
MIKE_HEAD_DIFF_FILE     = MIKE_HEAD_DIFF_FILE
DRY_RUN_LOG             = dry-run.log
INSTALL_LOG             = install.log

# -- tests ---------------------------------------------------------------------

ifneq ($(DATABASE_HOST),)
	PSQL_HOST = -h $(DATABASE_HOST)
endif

ifneq ($(DATABASE_PORT),)
	PSQL_PORT = -p $(DATABASE_PORT)
endif

ifneq ($(GIT),)
	GIT_DIR=$(realpath $(shell $(GIT) rev-parse --git-dir 2>/dev/null))
	ifneq ($(GIT_DIR),)
		IS_BARE_REPOSITORY=`$(GIT) rev-parse --is-bare-repository 2>/dev/null`
		IS_INSIDE_WORK_TREE=`$(GIT) rev-parse --is-inside-work-tree 2>/dev/null`
	endif
endif

PSQL_FULL_CMD = $(PSQL) -U $(DATABASE_USER) -d $(DATABASE_NAME) $(PSQL_EXTRA) $(PSQL_HOST) $(PSQL_PORT)

# -- version -------------------------------------------------------------------

$(MIKE_VERSION_FILE):
ifneq ($(GIT_DIR),)
	@$(RM) $(MIKE_VERSION_FILE)
	@$(SHELL) ./MIKE_VERSION_GEN $(MIKE_VERSION_FILE) $(MIKE_HEAD_DIFF_FILE) $(MIKE_TAG_DIFF_FILE)
endif

-include $(MIKE_VERSION_FILE)

# -- mike.o --------------------------------------------------------------------

clean-target:
	@$(ECHO) '    ' REMOVING $(TARGET_FILE); $(RM) $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)

info:
	@$(ECHO) '    ' LINK MIKE_VERSION $(MIKE_VERSION);  $(ECHO) "INSERT INTO mike.info VALUES ('MIKE_VERSION', '$(MIKE_VERSION)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_COMMIT $(MIKE_COMMIT);    $(ECHO) "INSERT INTO mike.info VALUES ('MIKE_COMMIT', '$(MIKE_COMMIT)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_BRANCH $(MIKE_BRANCH);    $(ECHO) "INSERT INTO mike.info VALUES ('MIKE_BRANCH', '$(MIKE_BRANCH)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_WHO_INSTALLED $(MIKE_WHO_INSTALLED); \
	                                                    $(ECHO) "INSERT INTO mike.info VALUES ('MIKE_WHO_INSTALLED', '$(MIKE_WHO_INSTALLED)');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK INSTALL_DATE `$(DATE)`;        $(ECHO) "INSERT INTO mike.info VALUES ('MIKE_INSTALL_DATE', NOW()::varchar);" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	@$(ECHO) '    ' LINK MIKE_USER;                     $(ECHO) "INSERT INTO mike.user (id_user_sso, nickname) VALUES ('mike', 'mike');" >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)
	
	@# MIKE_TAG_DIFF_FILE
	@$(ECHO) -n; \
	if test -f $(MIKE_TAG_DIFF_FILE); then \
	$(ECHO) '    ' LINK MIKE_TAG_DIFF_FILE;             ($(ECHO) -n "INSERT INTO mike.info VALUES ('MIKE_TAG_DIFF', E'"; \
	                                                    cat $(MIKE_TAG_DIFF_FILE) | $(SED) "s/\(['\\]\)/\1\1/g"; \
	                                                    $(ECHO) -n "');";) >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME); \
	fi
	@# MIKE_HEAD_DIFF_FILE
	@$(ECHO) -n; \
	if test -f $(MIKE_HEAD_DIFF_FILE); then \
	$(ECHO) '    ' LINK MIKE_HEAD_DIFF_FILE;            ($(ECHO) -n "INSERT INTO mike.info VALUES ('MIKE_HEAD_DIFF', E'"; \
	                                                    cat $(MIKE_HEAD_DIFF_FILE) | $(SED) "s/\(['\\]\)/\1\1/g"; \
	                                                    $(ECHO) -n "');";) >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME); \
	fi

dumps: clean-target $(DATABASE_DUMPS) info

%.dump : %.sql
	@$(ECHO) '    ' LINK $<; $(CAT) $< >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)

%.dump : %.pl
	@$(ECHO) '    ' LINK $<; $(CAT) $< >> $(TARGET_FILE); $(SLEEP) $(SLEEP_TIME)

# -- dry-run -------------------------------------------------------------------

dry-run::
	@$(MAKE) --no-print-directory dry-run-sub $(MAKEFLAGS)

dry-run-sub: dumps
# create database
ifeq ($(ENABLE_CREATE_DATABASE),Yes)
	@$(ECHO) '    ' CREATING DATABASE $(DATABASE_NAME) ON $(DATABASE_USER)@$(DATABASE_HOST); $(CREATEDB) $(PSQL_HOST) $(PSQL_PORT) -U $(DATABASE_USER) $(DATABASE_NAME) --encoding UTF8
	@$(ECHO) '    ' CREATING LANGUAGE plpgsql;  $(ECHO) "CREATE LANGUAGE plpgsql;"  | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING LANGUAGE plperl;   $(ECHO) "CREATE LANGUAGE plperl;"   | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' IMPORTING CONTRIB ltree;    $(PSQL_FULL_CMD) --file $(PG_CONTRIB_LTREE) --quiet
endif
# create schema
ifeq ($(ENABLE_CREATE_SCHEMA),Yes)
	@$(ECHO) '    ' DROPING SCHEMA mike IF EXISTS; $(ECHO) "DROP SCHEMA IF EXISTS mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING SCHEMA mike; $(ECHO) "CREATE SCHEMA mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' ALTERING search_path; $(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET search_path TO mike,public;" | $(PSQL_FULL_CMD) --quiet
endif
	@$(ECHO) '    ' EXECUTING; $(SLEEP) $(SLEEP_TIME)
	@$(ECHO);   ($(ECHO) "BEGIN;"; $(ECHO) $(CREATE_SCHEMA); $(CAT) $(TARGET_FILE); $(ECHO) "ROLLBACK;") | \
	                $(PSQL_FULL_CMD) | \
	                $(TEE) $(DRY_RUN_LOG)
	@$(ECHO) 
	@$(ECHO) "THIS WAS A DRY RUN !!!!"

# -- install -------------------------------------------------------------------

install:
	@$(MAKE) --no-print-directory install-sub $(MAKEFLAGS)

install-sub: dumps
# create database
ifeq ($(ENABLE_CREATE_DATABASE),Yes)
	@$(ECHO) '    ' CREATING DATABASE $(DATABASE_NAME) ON $(DATABASE_USER)@$(DATABASE_HOST); $(CREATEDB) $(PSQL_HOST) $(PSQL_PORT) -U $(DATABASE_USER) $(DATABASE_NAME) --encoding UTF8
	@$(ECHO) '    ' CREATING LANGUAGE plpgsql;  $(ECHO) "CREATE LANGUAGE plpgsql;"  | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING LANGUAGE plperl;   $(ECHO) "CREATE LANGUAGE plperl;"   | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' IMPORTING CONTRIB ltree;    $(PSQL_FULL_CMD) --file $(PG_CONTRIB_LTREE) --quiet
endif
# create schema
ifeq ($(ENABLE_CREATE_SCHEMA),Yes)
	@$(ECHO) '    ' DROPING SCHEMA mike IF EXISTS; $(ECHO) "DROP SCHEMA IF EXISTS mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' CREATING SCHEMA mike; $(ECHO) "CREATE SCHEMA mike;" | $(PSQL_FULL_CMD) --quiet
	@$(ECHO) '    ' ALTERING search_path; $(ECHO) "ALTER DATABASE $(DATABASE_NAME) SET search_path TO mike,public;" | $(PSQL_FULL_CMD) --quiet
endif
	@$(ECHO) '    ' EXECUTING; $(SLEEP) $(SLEEP_TIME)
	@$(ECHO);   ($(ECHO) "BEGIN;"; $(ECHO) $(CREATE_SCHEMA); $(CAT) $(TARGET_FILE); $(ECHO) "COMMIT;") | \
	                $(PSQL_FULL_CMD) | \
	                $(TEE) $(INSTALL_LOG)

clean:
ifneq ($(GIT),)
	@$(GIT) clean -fdx
else
	@$(MAKE) --no-print-directory clean-no-git $(MAKEFLAGS)
endif

clean-no-git: clean-doc
	@$(ECHO) Removing $(TARGET_FILE); $(RM) $(TARGET_FILE);
	@$(ECHO) Removing $(MIKE_VERSION_FILE); $(RM) $(MIKE_VERSION_FILE);
	@$(ECHO) Removing $(MIKE_TAG_DIFF_FILE); $(RM) $(MIKE_TAG_DIFF_FILE);
	@$(ECHO) Removing $(MIKE_HEAD_DIFF_FILE); $(RM) $(MIKE_HEAD_DIFF_FILE);
	@$(ECHO) Removing Makefile; $(RM) Makefile;
	@$(ECHO) Removing configure; $(RM) configure;
	@$(ECHO) Removing config.log; $(RM) config.log;
	@$(ECHO) Removing config.status; $(RM) config.status;
	@$(ECHO) Removing autom4te.cache; $(RM) autom4te.cache;
	@$(ECHO) Removing dry-run.log; $(RM) dry-run.log;
	@$(ECHO) Removing install.log; $(RM) install.log;

drop-database:
	@$(ECHO) '    ' DROPPING mike DATABASE; $(ECHO) "DROP DATABASE mike;" | $(PSQL) -U $(DATABASE_USER) $(PSQL_EXTRA) $(PSQL_HOST) $(PSQL_PORT) -d postgres --quiet

drop-schema:
	@$(ECHO) '    ' DROPPING mike SCHEMA; $(ECHO) "DROP SCHEMA IF EXITS mike;" | $(PSQL_FULL_CMD)

# -- git -----------------------------------------------------------------------

graph: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	exit 1
endif
	@$(GIT) log --graph --all --format="format:%C(yellow)%h %Creset%an: %s"

stats: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	exit 1
endif
	@$(ECHO) Number of commits by author :
	@$(GIT) shortlog --summary  --all --tags --numbered --email

gitstats: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	exit 1
else ifeq ($(GITSTATS),)
	@$(ECHO) >&2 "gitstats not installed ...";
	exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	exit 1
endif
	@$(GITSTATS) `$(REALPATH) .` stats

gource: .FORCE
ifeq ($(GIT),)
	@$(ECHO) >&2 "git not installed ...";
	exit 1
else ifeq ($(GOURCE),)
	@$(ECHO) >&2 "gource not installed ...";
	exit 1
else ifeq ($(GIT_DIR),)
	@$(ECHO) >&2 "not in a git repository ...";
	exit 1
endif
	@$(GOURCE) --title "Mike's master branch" --highlight-users --highlight-dirs --loop &

# -- documentation -------------------------------------------------------------

doc:
	@$(MAKE) --no-print-directory -C documentation all

man:
	@$(MAKE) --no-print-directory -C documentation man

html:
	@$(MAKE) --no-print-directory -C documentation html

install-doc:
	@$(MAKE) --no-print-directory -C documentation install

install-html:
	@$(MAKE) --no-print-directory -C documentation install-html

install-man:
	@$(MAKE) --no-print-directory -C documentation install-man

clean-doc:
	@$(MAKE) --no-print-directory -C documentation clean
	@$(RM) documention/Makefile

# -- special targets -----------------------------------------------------------

.NOTPARALLEL : %.dump
.PHONY: $(MIKE_VERSION_FILE) .FORCE
