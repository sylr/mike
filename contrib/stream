#!/usr/bin/env bash
# vim: set tabstop=4 expandtab:
# author: Sylvain Rabot <sylvain@abstraction.fr>
# date: 24/03/2011
# copyright: All rights reserved

STREAM_REALPATH=$(realpath $0)
CONTRIB_PATH=$(dirname $STREAM_REALPATH)
MIKE_PATH=$(dirname $CONTRIB_PATH)

# -- mike.conf -----------------------------------------------------------------

if [ ! -f "$MIKE_PATH/mike.conf" ]; then
    echo >&2 "$MIKE_PATH/mike.conf not found"
    echo >&2 "You need to execute autoconf && ./configure"
    exit 1
fi

source "$MIKE_PATH/mike.conf"

# -- mike.sh -------------------------------------------------------------------

source "$MIKE_PATH/lib/mike.sh"

# -- usage ---------------------------------------------------------------------

usage()
{
    cat <<EOT | cat >&2
       _____________  _______   __  ___
      / __/_  __/ _ \/ __/ _ | /  |/  /
     _\ \  / / / , _/ _// __ |/ /|_/ /
    /___/ /_/ /_/|_/___/_/ |_/_/  /_/

EOT
    echo >&2 "$0 usage:"
    echo >&2 "  stream data into mike"
    echo >&2 ""
    echo >&2 "   --streams      number of parallel stream"
    echo >&2 "   --dirs         dirs by level (Default: 5,5,5,5)"
    echo >&2 "   --files        files by level (Default: 5,5,5,5)"
    echo >&2 "   --versioning   enable versioning (Default: No)"
    echo >&2 "   --start        start with this id_user (Default: 0)"
    echo >&2 ""
}

# ------------------------------------------------------------------------------

ARGV=`$GETOPT --long h,help,streams:,dirs:,files:,versioning,start: -n "$0" -- "$0" "$@"`

if [ $? != 0 ] ; then
    die "Terminating ...";
fi

eval set -- "$ARGV"

# ------------------------------------------------------------------------------

STREAMS="1"
START="0"
REMAINDER=
DIR_BY_LEVEL="5,5,5,5"
FILE_BY_LEVEL="5,5,5,5"
VERSIONING="false"
SLEEP_TIME=0.5

while true ;
do
    case "$1" in
        --streams)      STREAMS="$2";           shift 2;;
        --dirs)         DIR_BY_LEVEL="$2";      shift 2;;
        --files)        FILE_BY_LEVEL="$2";     shift 2;;
        --start)        START="$2";             shift 2;;
        --versioning)   VERSIONING="true";      shift;;
        --)             shift;                  break;;
        -h|--help)      usage;                  exit 0;;
        *)              usage;                  exit 1;;
    esac
done

# -- config --------------------------------------------------------------------

if [ -z "${DATABASE_HOST}" ]; then
    PSQL_FULL_CMD="$PSQL -U${DATABASE_USER} -d ${DATABASE_NAME} --tuples-only --no-align"
    PSQL_FULL_CMD_ALIGNED="$PSQL -U${DATABASE_USER} -d ${DATABASE_NAME} --tuples-only"
else
    PSQL_FULL_CMD="$PSQL -U${DATABASE_USER} -d ${DATABASE_NAME} -h ${DATABASE_HOST} --tuples-only --no-align"
    PSQL_FULL_CMD_ALIGNED="$PSQL -U${DATABASE_USER} -d ${DATABASE_NAME} -h ${DATABASE_HOST}"
fi

# -- checks --------------------------------------------------------------------

if [[ "$STREAMS" -gt "1" || -n "$DETACH" ]]; then
    if [ "$NO_VOLUME_LOCK" != "yes" ]; then
        echo 2>&1 "You filthy bastard, you're trying to do streaming on an instance"
        echo 2>&1 "without NO_VOLUME_LOCK support. You are probably going nowhere !"
        abort "That's what I thought !ยง!!"
    fi
fi

# -- main ---------------------------------------------------------------

OFFSET=0

while [[ -n $($PSQL_FULL_CMD -c "SELECT id_user FROM mike.user WHERE id_user >= $START ORDER BY id_user LIMIT 20 OFFSET $OFFSET;") ]]; do 
    STREAM_QUERY="SELECT * FROM __stream({1}, ARRAY[$DIR_BY_LEVEL], ARRAY[$FILE_BY_LEVEL], $VERSIONING);"
    parallel --gnu  -u -j $STREAMS "echo stream started: {1}; $PSQL_FULL_CMD -c '$STREAM_QUERY' > /dev/null; echo stream finished: {1};" ::: $($PSQL_FULL_CMD -c "SELECT id_user FROM mike.user WHERE id_user >= $START ORDER BY id_user LIMIT 20 OFFSET $OFFSET;")
    OFFSET=$((OFFSET + 20))
done

exit 0
