#!/usr/bin/env bash
# vim: set tabstop=4 expandtab autoindent smartindent:
# author: Sylvain Rabot <sylvain@abstraction.fr>
# date: 03/07/2010
# copyright: All rights reserved

TAG_REALPATH=$(realpath $0)
CONTRIB_PATH=$(dirname $TAG_REALPATH)
MIKE_PATH=$(dirname $CONTRIB_PATH)
ACMATCH="\[\(.*\)\]"

# -- mike.conf -----------------------------------------------------------------

if [ ! -f "$MIKE_PATH/mike.conf" ]; then
    echo >&2 "$MIKE_PATH/mike.conf not found"
    echo >&2 "You need to execute autoconf && ./configure"
    exit 1
fi

source "$MIKE_PATH/mike.conf"

# -- mike.sh -------------------------------------------------------------------

source "$MIKE_PATH/lib/mike.sh"

# -- usage ---------------------------------------------------------------------

usage()
{
    echo >&2 "$0 usage:"
    echo >&2 "   --major    make major release"
    echo >&2 "   --minor    make minor release"
    echo >&2 "   --maint    make maint release"
    echo >&2 "   --rc       make rc release"
}

# ------------------------------------------------------------------------------

ARGV=`$GETOPT --long h,help,major,minor,maint,rc -n "$0" -- $0 $@`

if [ $? != 0 ] ; then
    die "Terminating ...";
fi

eval set -- "$ARGV"

# ------------------------------------------------------------------------------

while true ;
do
    case "$1" in
        --major)    TAG_TYPE="MAJOR";   shift;;
        --minor)    TAG_TYPE="MINOR";   shift;;
        --maint)    TAG_TYPE="MAINT";   shift;;
        --rc)       TAG_RC="RC";        shift;;
        --)         shift;              break;;
        -h|--help)  usage;              exit 0;;
        *)          usage;              exit 1;;
    esac
done

# ------------------------------------------------------------------------------

LAST_TAG=$($GIT describe --match "v[0-9]*.[0-9]*.[0-9]*" --no-abbrev 2>/dev/null)

# testing if a tag already exists
if [ -z "$LAST_TAG" ]; then
    die "No parent tag found"
fi

# parsing last tag
LAST_TAG_DIGITS=$(parse_tag $LAST_TAG)
LAST_TAG_MAJOR=$($ECHO $LAST_TAG_DIGITS | $CUT -d ' ' -f1)
LAST_TAG_MINOR=$($ECHO $LAST_TAG_DIGITS | $CUT -d ' ' -f2)
LAST_TAG_MAINT=$($ECHO $LAST_TAG_DIGITS | $CUT -d ' ' -f3)
LAST_TAG_RC=$($ECHO $LAST_TAG_DIGITS | $CUT -d ' ' -f4)

# setting RC part of tag if empty
if [ -z "$LAST_TAG_RC" ]; then
    LAST_TAG_RC=0
fi

# generating major version
if [ "$TAG_TYPE" == "MAJOR" ]; then
    NEXT_TAG_MAJOR=$(($LAST_TAG_MAJOR + 1));
    NEXT_TAG_MINOR=0;
    NEXT_TAG_MAINT=0;
    if [ "$TAG_RC" == "RC" ]; then
        NEXT_TAG_RC="-rc1"
    elif [ "$LAST_TAG_RC" -ne "0" ]; then
        NEXT_TAG_MAJOR=$LAST_TAG_MAJOR;
    fi
# generating minor version
elif [ "$TAG_TYPE" == "MINOR" ]; then
    NEXT_TAG_MAJOR=$LAST_TAG_MAJOR;
    NEXT_TAG_MINOR=$(($LAST_TAG_MINOR + 1));
    NEXT_TAG_MAINT=0;
    if [ "$TAG_RC" == "RC" ]; then
        NEXT_TAG_RC="-rc1"
    elif [ "$LAST_TAG_RC" -ne "0" ]; then
        NEXT_TAG_MINOR=$LAST_TAG_MINOR;
    fi
# generating maint version
elif [ "$TAG_TYPE" == "MAINT" ]; then
    NEXT_TAG_MAJOR=$LAST_TAG_MAJOR;
    NEXT_TAG_MINOR=$LAST_TAG_MINOR;
    NEXT_TAG_MAINT=$(($LAST_TAG_MAINT + 1));
    if [ "$TAG_RC" == "RC" ]; then
        NEXT_TAG_RC="-rc1"
    elif [ "$LAST_TAG_RC" -ne "0" ]; then
        NEXT_TAG_MAINT=$LAST_TAG_MAINT;
    fi
else
    if [ "$TAG_RC" == "RC" ]; then
        if [ "$LAST_TAG_RC" == "0" ]; then
            die "You can't make a rc tag of v$LAST_TAG_MAJOR.$LAST_TAG_MINOR.$LAST_TAG_MAINT \
            because a non rc tag of this version has already been released"
        else
            NEXT_TAG_MAJOR=$LAST_TAG_MAJOR;
            NEXT_TAG_MINOR=$LAST_TAG_MINOR;
            NEXT_TAG_MAINT=$LAST_TAG_MAINT;
            NEXT_TAG_RC="-rc$(($LAST_TAG_RC + 1))"
        fi
    else
        die "You must specify either --major --minor --maint or --rc option"
    fi
fi

NEXT_TAG_FULL="v$NEXT_TAG_MAJOR.$NEXT_TAG_MINOR.$NEXT_TAG_MAINT$NEXT_TAG_RC"

# abort ?
echo "About to tag Mike $NEXT_TAG_FULL"
abort

# checking configure.ac
VERSION_IN_AC=$(grep "AC_INIT" $MIKE_PATH/configure.ac | \
    sed "s#AC_INIT($ACMATCH, $ACMATCH, $ACMATCH, , $ACMATCH)#\2#")

if [ "$VERSION_IN_AC" != "$NEXT_TAG_FULL" ]; then
    echo "configure.ac version $VERSION_IN_AC out of date"
    echo "About to write configure.ac"
    abort

    if [ ! -z "$(git diff configure.ac)" ]; then
        die "configure.ac is in dirty state ..."
    fi

    cat "$MIKE_PATH/configure.ac" | \
    sed "s#AC_INIT($ACMATCH, $ACMATCH, $ACMATCH, , $ACMATCH)#\AC_INIT([\1], [$NEXT_TAG_FULL], [\3], , [\4])#" > \
        "$MIKE_PATH/configure.ac.tmp"

    mv "$MIKE_PATH/configure.ac.tmp" "$MIKE_PATH/configure.ac"
    $GIT add "$MIKE_PATH/configure.ac" &&
    $GIT commit -as -m "Mike $NEXT_TAG_FULL"
fi

# tag
$GIT tag -s "$NEXT_TAG_FULL" -m "Mike $NEXT_TAG_FULL"

