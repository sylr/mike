mike-install(1)
===============

NAME
----
mike-install - mike's install procedure

SYNOPSIS
--------
[verse]
'autoconf'
'./configure' [--with-git=] [--with-psql=] [--with-pg_config=]
    [--with-pg_dump=] [--with-createdb=] [--with-apgdiff=]
    [--enable-create-database] [--enable-create-schema]
    [DATABASE_USERNAME=] [DATABASE_NAME=] [DATABASE_HOST=] [DATABASE_PORT=]
'make' [install|graph|stat|clean|doc|man|install-doc|install-man]

DESCRIPTION
-----------

Getting the source
~~~~~~~~~~~~~~~~~~
Mike use 'Git' as Source Code Management. You must have it to get the source.
Once installed proceed that way :

[source,shell]
--------------------------
sylvain@kheops:~/$ git clone {mike_git_url} mike.git
sylvain@kheops:~/$ cd mike.git
--------------------------

Install
~~~~~~~
Mike relies on 'autotools' and 'make' for automatic install.

[source,shell]
-------------------------
sylvain@kheops:~/mike.git/$ autoconf
sylvain@kheops:~/mike.git/$ ./configure DATABASE_USERNAME=sylvain
sylvain@kheops:~/mike.git/$ make
-------------------------

First, you have to generate the 'configure' script by running the 'autoconf' tool
at the 'root' of Mike. Then, launch the './configure' script with the desired options,
it will check for external programs needed for Mike's install and prepare the 'Makefile'
with 'configuration' values passed as arguments. Proceed by lauching 'make' with
the desired target, the default one being dry-run, which performs a test install
on a pre-exisiting database.

Note that you can 'override' configuration values given to 'configure' without having
to regenerate the Makefile each time. to do so proceed like in the following example :

[source,shell]
-------------------------
sylvain@kheops:~/mike.git/$ ./configure DATABASE_USERNAME=sylvain
sylvain@kheops:~/mike.git/$ make install DATABASE_USERNAME=mike DATABASE_NAME=my_vfs
-------------------------

Authors
-------
Written by Sylvain Rabot <sylvain@abstraction.fr>

MIKE
----
Part of the linkmike:mike[1] suite
